package nyu.hezzze.weiqi.shared;

import static nyu.hezzze.weiqi.shared.Gamer.BLACK;
import static nyu.hezzze.weiqi.shared.Gamer.O;
import static nyu.hezzze.weiqi.shared.Gamer.WHITE;
import static nyu.hezzze.weiqi.shared.Gamer.X;
import static nyu.hezzze.weiqi.shared.Gamer._;
import static org.junit.Assert.assertEquals;

import org.junit.Test;



/**
 *  @author hezzze@gmail.com (Zeyu He)
 */
public class StateTest {
	
	private final State initialState = new State();
	
	//# 1
	@Test 
	public void testInitialStateInitialBoard() {
		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(initialState, expectedState);
	}
	
	//# 2
	@Test 
	public void testInitialStateWhoseTurn() {
		assertEquals(initialState.whoseTurn(), BLACK);
	}
	
	//# 3
	@Test
	public void testValidFirstMoveForBlack() {
		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State newState = initialState.makeMove(new Position(2, 3));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(newState.whoseTurn(), WHITE);
		assertEquals(newState, expectedState);
	}

	//# 4
	@Test 
	public void testValidFirstMoveForWhite() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(16, 15));
		
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	//# 5
	@Test (expected = IllegalMove.class)
	public void testIllegalMoveBlackOutOfBound() {
		assertEquals(initialState.whoseTurn(), BLACK);
		initialState.makeMove(new Position(19, 8));
	}
	
	//# 6
	@Test (expected = IllegalMove.class)
	public void testIllegalMoveWhiteOutOfBound() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, WHITE, false, null);
		assertEquals(beforeState.whoseTurn(), WHITE);
		beforeState.makeMove(new Position(0, 20));
	}
	
	//# 7
	@Test (expected = IllegalMove.class)
	public void testIllegalMoveBlackNoLiberty() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, X, X, _, X, _, _, _, _, _, _, _, _, _, X, O, O, _, _ }, // 0
				{ _, O, X, X, O, X, _, X, X, O, _, O, _, X, _, X, O, _, _ }, // 1
				{ X, O, X, O, O, X, X, O, O, O, _, O, X, _, X, _, O, _, _ }, // 2
				{ O, _, O, O, _, X, O, O, _, _, O, X, _, X, _, X, O, _, _ }, // 3
				{ O, _, _, O, _, X, X, O, X, X, O, _, X, X, _, X, O, O, _ }, // 4
				{ _, O, O, O, _, _, _, X, O, _, O, _, _, _, O, _, O, X, _ }, // 5
				{ _, X, _, O, X, X, _, X, O, _, O, X, X, O, _, _, O, X, _ }, // 6
				{ _, O, X, X, O, X, _, _, X, O, O, O, X, O, _, _, X, O, _ }, // 7
				{ O, _, O, O, O, X, _, _, X, _, _, X, _, O, _, X, X, X, _ }, // 8
				{ _, O, O, O, X, _, X, _, _, _, X, _, O, O, _, X, _, _, _ }, // 9
				{ _, _, _, O, O, X, _, X, _, _, _, X, X, O, _, O, X, _, _ }, // 10
				{ _, X, O, _, X, O, X, X, _, _, _, _, X, O, _, O, X, X, X }, // 11
				{ X, _, X, X, O, O, O, O, X, X, _, _, _, X, X, O, O, X, _ }, // 12
				{ _, X, O, O, O, _, _, _, O, O, X, X, _, X, O, X, O, O, X }, // 13
				{ _, X, X, _, _, _, _, _, _, _, _, _, _, _, O, X, X, X, _ }, // 14 
				{ X, _, X, _, X, X, X, _, _, X, O, X, X, O, O, O, X, _, _ }, // 15
				{ _, X, O, O, O, O, _, X, X, _, X, O, O, _, O, X, X, X, _ }, // 16
				{ X, O, _, _, _, _, O, O, O, X, X, X, O, _, O, X, X, O, O }, // 17
				{ _, O, _, _, _, _, _, _, _, _, X, _, _, _, _, O, O, O, _ }  // 18
		};
		State beforeState = new State(before, BLACK, false, null);
		assertEquals(beforeState.whoseTurn(), BLACK);
		beforeState.makeMove(new Position(8, 1));
	}
	
	//# 8
	@Test (expected = IllegalMove.class)
	public void testIllegalMoveWhiteNoLiberty() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, X, X, _, X, _, _, _, _, _, _, _, _, _, X, O, O, _, _ }, // 0
				{ _, O, X, X, O, X, _, X, X, O, _, O, _, X, _, X, O, _, _ }, // 1
				{ X, O, X, O, O, X, X, O, O, O, _, O, X, _, X, _, O, _, _ }, // 2
				{ O, _, O, O, _, X, O, O, _, _, O, X, _, X, _, X, O, _, _ }, // 3
				{ O, _, _, O, _, X, X, O, X, X, O, _, X, X, _, X, O, O, _ }, // 4
				{ _, O, O, O, _, _, _, X, O, _, O, _, _, _, O, _, O, X, _ }, // 5
				{ _, X, _, O, X, X, _, X, O, _, O, X, X, O, _, _, O, X, _ }, // 6
				{ _, O, X, X, O, X, _, _, X, O, O, O, X, O, _, _, X, O, _ }, // 7
				{ O, _, O, O, O, X, _, _, X, _, _, X, _, O, _, X, X, X, _ }, // 8
				{ _, O, O, O, X, _, X, _, _, _, X, _, O, O, _, X, _, _, _ }, // 9
				{ _, _, _, O, O, X, _, X, _, _, _, X, X, O, _, O, X, _, _ }, // 10
				{ _, X, O, _, X, O, X, X, _, _, _, _, X, O, _, O, X, X, X }, // 11
				{ X, _, X, X, O, O, O, O, X, X, _, _, _, X, X, O, O, X, _ }, // 12
				{ _, X, O, O, O, _, _, _, O, O, X, X, _, X, O, X, O, O, X }, // 13
				{ _, X, X, _, _, _, _, _, _, _, _, _, _, _, O, X, X, X, _ }, // 14 
				{ X, _, X, _, X, X, X, _, _, X, O, X, X, O, O, O, X, _, _ }, // 15
				{ _, X, O, O, O, O, _, X, X, _, X, O, O, _, O, X, X, X, _ }, // 16
				{ X, O, _, _, _, _, O, O, O, X, X, X, O, _, O, X, X, O, O }, // 17
				{ _, O, _, _, _, _, _, _, _, _, X, _, _, _, _, O, O, O, _ }  // 18
		};
		State beforeState = new State(before, WHITE, false, null);
		assertEquals(beforeState.whoseTurn(), WHITE);
		beforeState.makeMove(new Position(16, 9));
	}
	
	//# 9
	@Test 
	public void testBlackMoveCaptureOne() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(3, 1));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
	}
	
	//# 10
	@Test 
	public void testWhiteMoveCaptureOne() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, O, X, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, O, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, O, X, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, O, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(7, 4));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
	}
	
	//# 11
	@Test 
	public void testBlackMoveCaptureVerticalStones() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, X, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(7, 2));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
	}
	
	//# 12
	@Test 
	public void testWhiteMoveCaptureVerticalStones() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, X, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, X, O, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, X, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, _, O, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(7, 5));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
	}
	
	//# 13
	@Test 
	public void testBlackMoveCaptureHorizontalStones() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, X, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, _, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, _, X, O, O, X, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, _, O, X, X, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, _, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, X, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, X, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, X, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, _, X, X, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, _, X, _, _, X, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, _, O, X, X, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, _, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, X, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, X, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(4, 7));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
	}
	
	//# 14
	@Test 
	public void testWhiteMoveCaptureHorizontalStones() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, X, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, _, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, _, X, O, O, X, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, _, O, X, X, O, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, O, _, O, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, _, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, X, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, X, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, _, X, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, _, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, X, O, _, X, O, O, X, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, _, O, _, _, O, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, O, O, O, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, _, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, _, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, X, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, X, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(7, 6));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
	}

	//# 15
	@Test 
	public void testBlackMoveCaptureMultipleStones() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, X, X, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, O, X, _, _, _, _, _, _, _, _, X, _, _, _ }, // 4
				{ _, _, X, O, _, X, X, O, X, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, O, O, X, X, O, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, X, O, O, O, X, O, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, X, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, X, O, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, O, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, X, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, X, _, _ }, // 14 
				{ _, _, _, _, O, _, _, _, _, _, _, _, _, _, O, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, X, X, X, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, _, _, X, _, _, _, _, _, _, _, _, X, _, _, _ }, // 4
				{ _, _, X, _, X, X, X, O, X, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, _, _, _, X, X, O, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, X, _, _, _, X, O, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, _, X, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, X, O, _, X, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, O, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, X, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, X, _, _ }, // 14 
				{ _, _, _, _, O, _, _, _, _, _, _, _, _, _, O, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(5, 4));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
	}
	
	//# 16
	@Test 
	public void testWhiteMoveCaptureMultipleStones() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, X, O, X, O, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, O, X, O, _, _, _, _, _, _, _, X, _, _, _ }, // 4
				{ _, _, X, O, _, X, X, O, X, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, O, O, X, X, O, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, X, O, O, O, X, O, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, _, O, X, X, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, O, _, X, _, X, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, O, _, O, _, _, _, X, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, X, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, X, _, _ }, // 14 
				{ _, _, _, _, O, _, _, _, _, _, _, _, _, _, O, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, X, _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, X, _, X, X, O, _, O, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, X, X, O, O, _, O, _, _, _, _, _, _, _, X, _, _, _ }, // 4
				{ _, _, X, O, O, _, _, O, X, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, X, O, O, O, _, _, O, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, X, O, O, O, _, O, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, X, O, _, O, X, X, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, O, _, O, _, X, _, X, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, O, _, O, _, _, _, X, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, X, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, O, O, _, X, _, _ }, // 14 
				{ _, _, _, _, O, _, _, _, _, _, _, _, _, _, O, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(5, 4));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	//# 17
	@Test 
	public void testCaptureOneAtNorthEdge() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, O, X, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, X, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, O, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, X, _, X, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, X, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, O, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(0, 7));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	
	//# 18
	@Test 
	public void testCaptureOneAtSouthEdge() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, X, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, O, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, O, X, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, X, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, O, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, O, _, O, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(18, 10));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
		
	}
	

	
	//# 19
	@Test 
	public void testCaptureOneAtWestEdge() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ X, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ X, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(9, 0));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	//# 20
	@Test 
	public void testCaptureOneAtEastEdge() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, X }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, X, _, _, _, _, X, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, X, X, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, O }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, X, _, _, _, _, X, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, X, X, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(3, 18));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	
	//# 21
	@Test 
	public void testCaptureMultipleAtNorthEdge() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, O, O, O, O, X, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, X, O, X, O, X, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, X, X, X, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, O, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, X, _, _, _, _, X, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, X, _, X, _, X, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, X, X, X, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, O, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(0, 4));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	
	//# 22
	@Test 
	public void testCaptureMultipleAtSouthEdge() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, X, X, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, O, O, O, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, O, X, X, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, X, X, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, O, O, O, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, O, _, _, O, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(18, 11));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
		
	}
	

	
	//# 23
	@Test 
	public void testCaptureMultipleAtWestEdge() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ X, X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ O, X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ O, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ O, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(6, 0));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	//# 24
	@Test 
	public void testCaptureMultipleAtEastEdge() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, O, O, O }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, O, O }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, O, X }, // 2
				{ _, _, _, _, X, _, _, _, _, _, _, _, _, _, _, _, X, O, O }, // 3
				{ _, _, _, O, _, _, _, _, _, _, _, X, _, _, _, _, X, _, X }, // 4
				{ _, _, X, _, O, _, _, _, _, _, _, _, _, _, _, _, _, X, _ }, // 5
				{ _, _, O, _, O, _, _, _, _, _, _, _, X, X, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, _, _ }, // 1
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, _, X }, // 2
				{ _, _, _, _, X, _, _, _, _, _, _, _, _, _, _, _, X, _, _ }, // 3
				{ _, _, _, O, _, _, _, _, _, _, _, X, _, _, _, _, X, X, X }, // 4
				{ _, _, X, _, O, _, _, _, _, _, _, _, _, _, _, _, _, X, _ }, // 5
				{ _, _, O, _, O, _, _, _, _, _, _, _, X, X, _, _, _, _, _ }, // 6
				{ _, _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(4, 17));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	
	//# 25
	@Test 
	public void testCaptureAtNorthwestCorner() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ O, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(1, 0));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	//# 26
	@Test 
	public void testCaptureAtNortheastCorner() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, X }, // 0
				{ _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, _ }, // 0
				{ _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O }, // 1
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, WHITE, false, null);
		State afterState = beforeState.makeMove(new Position(1, 18));
		State expectedState = new State(expected, BLACK, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	//# 27
	@Test 
	public void testCaptureAtSouthwestCorner() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, X }, // 0
				{ _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ X, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ O, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, X }, // 0
				{ _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ X, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(18, 2));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
		
	}
	
	//# 28
	@Test 
	public void testCaptureAtSoutheastCorner() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, X }, // 0
				{ _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X }, // 15
				{ X, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, O }, // 16
				{ O, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O }, // 17
				{ O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, O }  // 18
		};

		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ X, X, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, O, X }, // 0
				{ _, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X }, // 15
				{ X, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, _ }, // 16
				{ O, O, X, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, _ }, // 17
				{ O, O, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, X, _ }  // 18
		};
		
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(17, 17));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
	}
	
	//# 29
	@Test 
	public void testBlackWin() {
		Gamer[][] finalBoard = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, O, O, X, _, _, _, _, X, O, O, O, O, _, _, _, _ }, // 0
				{ _, _, _, O, X, X, X, _, _, _, _, X, X, X, O, _, O, _, O }, // 1
				{ _, _, _, O, X, X, X, X, X, _, X, _, X, O, _, _, O, O, X }, // 2
				{ _, _, O, _, O, X, O, O, X, _, X, _, X, O, O, O, X, X, X }, // 3
				{ _, _, O, O, O, O, O, O, O, X, X, X, O, O, O, X, _, X, _ }, // 4
				{ _, O, X, X, X, O, O, X, X, O, X, X, X, O, O, X, X, _, _ }, // 5
				{ _, _, O, X, X, X, X, X, O, O, O, X, X, O, O, X, _, _, _ }, // 6
				{ _, _, O, O, X, _, _, X, O, O, X, O, O, O, X, X, O, X, _ }, // 7
				{ _, O, X, X, _, X, X, X, O, O, X, X, X, X, X, O, X, X, _ }, // 8
				{ _, O, X, X, X, X, O, O, X, O, X, O, X, O, X, O, O, _, _ }, // 9
				{ _, O, X, O, O, O, _, _, X, O, X, O, O, O, X, _, _, _, _ }, // 10
				{ O, O, O, _, _, O, O, O, O, O, X, O, _, O, O, X, _, _, _ }, // 11
				{ X, X, O, O, O, X, X, X, O, X, O, O, O, X, X, X, _, _, _ }, // 12
				{ X, _, X, O, X, X, _, X, O, _, X, _, O, X, _, _, _, _, _ }, // 13
				{ _, X, X, O, X, _, X, O, O, _, _, _, _, O, X, X, X, _, _ }, // 14 
				{ _, O, X, X, _, X, O, O, O, _, _, _, _, O, O, O, X, X, X }, // 15
				{ _, X, _, _, _, X, X, O, _, _, _, _, _, _, _, _, O, O, X }, // 16
				{ _, _, _, O, X, _, X, X, O, O, _, _, _, _, _, _, O, _, O }, // 17
				{ _, _, _, _, _, _, _, X, X, O, _, _, _, _, _, _, _, _, _ }  // 18
		};

		
		State beforeState = new State(finalBoard, BLACK, false, null);
		State passFirstTime = beforeState.pass();
		State finalState = passFirstTime.pass();
		State expectedState = new State(finalBoard, BLACK, true, new GameOver(
				GameResult.WHITE_WIN, 182, 179));
		assertEquals(finalState, expectedState);

	}
	
	@Test (expected = IllegalMove.class)
	public void testIllegalMoveForBlackSuicide() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, O, O, O, O, O, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, O, X, X, X, _, X, O, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, O, O, O, O, O, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, O, O, O, O, O, _, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, O, X, X, X, X, X, O, _, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, O, O, O, O, O, _, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(3,5));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
	}
	
	@Test 
	public void testValidMoveForBlack() {
		Gamer[][] before = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, O, O, O, X, O, O, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, O, X, X, X, _, X, X, O, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, O, O, O, O, O, O, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		Gamer[][] expected = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, O, O, O, X, O, O, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, O, X, X, X, X, X, X, O, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, O, O, O, O, O, O, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State beforeState = new State(before, BLACK, false, null);
		State afterState = beforeState.makeMove(new Position(3,5));
		State expectedState = new State(expected, WHITE, false, null);
		assertEquals(afterState, expectedState);
		
		System.out.println(expectedState);
	}
	
	@Test
	public void testSerialization() {
		Gamer[][] board = {
				//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 0
				{ _, _, _, _, _, X, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 1
				{ _, _, O, O, O, X, O, O, _, _, _, _, _, _, _, _, _, _, _ }, // 2
				{ _, O, X, X, X, _, X, X, O, _, _, _, _, _, _, _, _, _, _ }, // 3
				{ _, _, O, O, O, O, O, O, _, _, _, _, _, _, _, _, _, _, _ }, // 4
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 5
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 6
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 7
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 8
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 9
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 10
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 11
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 12
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 13
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 14 
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 15
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 16
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }, // 17
				{ _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ }  // 18
		};
		
		State state1 = new State(board, BLACK, false, null);
		String str = State.serialize(state1);
		
		State state2 = State.deserialize(str);
		
		assertEquals(state1, state2);
	}
	
	

	
	
	
	
	
	
	
	
	

}
